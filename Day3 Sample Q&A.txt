
24082017
-------------
https://www.hackerrank.com/challenges/simple-text-editor
https://www.hackerrank.com/challenges/maximum-element   --Resolved by srikanth
https://www.hackerrank.com/challenges/equal-stacks
https://www.hackerrank.com/challenges/similar-strings

29082017
-----------
Sorting & Shufling:https://docs.oracle.com/javase/tutorial/collections/algorithms/index.html
Binary Search: https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html


31082017
------------
https://www.hackerrank.com/challenges/sam-and-substrings ---Resolved by yesh 
https://www.hackerrank.com/challenges/fibonacci-modified  - Resolved by Yesh
https://www.hackerrank.com/challenges/abbr
https://www.hackerrank.com/challenges/decibinary-numbers


https://www.hackerrank.com/domains/fp/dp *****************

https://www.hackerrank.com/challenges/two-robots


Dynamic Programming:
https://www.hackerrank.com/topics/dynamic-programming-basics  --theory



--------------------
Sample Question
--------------------

1)Given two numbers  and . Swap  and  without using airthmetic operator and without using third variable.
 solution)
 a=a^b;
 b=a^b;
 a=a^b;
 
 2)Given below Strings
No of Strings:6
31415926535897932384626433832795
1
3
10
3
5
Sort in ascending order.

Solution)
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        String[] unsorted = new String[n];
        for(int unsorted_i=0; unsorted_i < n; unsorted_i++){
            unsorted[unsorted_i] = in.next();
        }
       Arrays.sort(unsorted,new Comparator<String>() {
            @Override
            public int compare(String a, String b) 
            {
                return StringAsIntegerCompare(a,b);
            }
        });
        
        for(int i=0;i<unsorted.length;i++)
        System.out.println(unsorted[i]);
    }
    
    public static int StringAsIntegerCompare(String s1,String s2)
    {
         if(s1.length() > s2.length()) return 1;
        if(s1.length() < s2.length()) return -1;
        for(int i = 0; i < s1.length(); i++)
        {
            if((int)s1.charAt(i) > (int)s2.charAt(i)) return 1;
            if((int)s1.charAt(i) < (int)s2.charAt(i)) return -1;
        }
        return 0;
    }
}

3)https://www.hackerrank.com/contests/projecteuler/challenges/euler013

4)Consider an array of n integers, numbers. We define a non-unique value of numbers 
to be an integer that appears at least twice in the array. For example, 
if numbers = [1, 1, 2, 2, 2, 3, 4, 3, 9], then there are a total of 3 non-unique values in the array (i.e., 1, 2, and 3).
Complete the countDuplicates function in the editor below. It has 1 parameter: an array of integers, 
numbers. It must return an integer denoting the number of non-unique values in the numbers array.

Input Format

Locked stub code in the editor reads the following input from stdin and passes it to the function:

The first line contains an integer, n, denoting the size of the numbers array.

Each line i of the n subsequent lines (where 0 ≤ i < n) contains an integer describing the value of numbersi.

Constraints
•1 ≤ n ≤ 1000
•1 ≤ numbersi ≤ 1000

Explanation 0

n = 8 and numbers = [1, 3, 1, 4, 5, 6, 3, 2].

The integers 1 and 3 both occur more than once, so we return 2 as our answer.


5)

Consider an initially empty dataset of integers named elements. We want to perform the following query operations on elements:
 
The command push x inserts the value of x into elements.
The command pop x removes the value of x from elements.
 
We want to order the integers in elements in such a way that, after performing each operation, we can easily calculate the product of the maximum and minimum values in elements.
 
Complete the function in the editor below. It has the following parameters:
 
An array of n strings, operations, denoting the list of operations where each operationi is either push or pop.
An array of n integers, x, where xi denotes the value of x to be inserted or removed into elements when performing operationsi.
 
The function must return an array of n long integers where the value at each index i denotes the product of the maximum and minimum elements in elements after performing operationi xi. Note that each operation must be performed in order (i.e., from index 0 to index n−1), and it is guaranteed that the value of xi for operationi = "pop" will always have already been pushed into elements prior to the pop operation being called.
 
Input Format
The first line contains an integer, n, denoting the size of operations.
Each line i of the n subsequent lines (where 0 ≤ i < n) contains a string describing operationsi.
The next line contains an integer, n, denoting the size of x.
Each line i of the n subsequent lines (where 0 ≤ i < n) contains an integer describing xi.
 
Constraints
1 ≤ n ≤ 105
1 ≤ xi ≤ 109
It is guaranteed that each operationsi is either push or pop.
 
Output Format
The function must return an array of n long integers where the value at each index i denotes the product of the maximum and minimum elements in elements after performing operation operationsi with x value xi.
 
Sample Input 0
4
push
push
push
pop
4
1
2
3
1
 
Sample Output 0
1
2
3
6
 
Explanation 0
We have operations = [push, push, push, pop] and x = [1, 2, 3, 1]; we'll visualize elements as an empty multiset, elements = {}, and refer to our return array as products. The sequence of operations looks like this:
 
push 1 → elements = {1}, so our minimum = 1 and our maximum = 1. We then store their product as products0 = 1 × 1 = 1.
push 2 → elements = {1, 2}, so our minimum = 1 and our maximum = 2. We then store their product as products1 = 1 × 2 = 2.
push 3 → elements = {1, 2, 3}, so our minimum = 1 and our maximum = 3. We then store their product as products2 = 1 × 3 = 3.
pop 1 → elements = {2, 3}, so our minimum = 2 and our maximum = 3. We then store their product as products3 = 2 × 3 = 6.
 
We then return products = [1, 2, 3, 6] as our answer.
 
Sample Input 1
2
push
push
2
3
2
 
Sample Output 0
9
6
 
Explanation 1
We have operations = [push, push] and x = [3, 2]; we'll visualize elements as an empty multiset, elements = {}, and refer to our return array as products. The sequence of operations looks like this:
 
push 3 → elements = {3}, so our minimum = 3 and our maximum = 3. We then store their product as products0 = 3 × 3 = 9.
push 2 → elements = {2, 3}, so our minimum = 2 and our maximum = 3. We then store their product as products1 = 2 × 3 = 6.
 
We then return products = [9, 6] as our answer.