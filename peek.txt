peek :

Stream<T> peek(Consumer<? super T> action)\

Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream.

This method exists mainly to support debugging, where you want to see the elements as they flow past a certain point in a pipeline:

     Stream.of("one", "two", "three", "four")
         .filter(e -> e.length() > 3)
         .peek(e -> System.out.println("Filtered value: " + e))
         .map(String::toUpperCase)
         .peek(e -> System.out.println("Mapped value: " + e))
         .collect(Collectors.toList());



Another example :
-----------------
package com.javabrahman.java8.streams;
import java.util.stream.Stream;
public class PeekingInStreams {
  public static void main(String args[]) {
    Stream.iterate(1, (Integer n) -> n + 1)
      .peek(n -> System.out.println("number generated: - " + n))
      .filter(n -> (n % 2 == 0))
      .peek(n -> System.out.println("Even number filter passed for - " + n))
      .limit(5)
      .count();
  }
}